每天花大概1小時左右學習微服務相關技術直到懶惰或學不動為止
2024/06/26 Day6
Spring Boot篇


一.使用IntelliJ的DB功能連線mySql建立table
1.新增資料庫
  create DATABASE mykdbc
2.新增Table
  create table student(
    id int PRIMARY KEY,
    name VARCHAR(30)
    )

二.資料庫連線設定
1.pom.xml新增jdbc，可以讓spring bott的程式使用spring jdbc
  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
  </dependency>

2.maven mysql安裝，添加mysql的driver
  <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.22</version>
</dependency>

3.application.properties是spring boot的設定檔，存放spring boot的設定值
  設定使用的驅動程式:
  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
  設定連接myjdbc的資料庫+時區+編碼:
  spring.datasource.url=jdbc:mysql://localhost:3306/myjdbc?serverTimezone=Asia/Taipei&characterEncoding=utf-8
  設定連線帳號:
  spring.datasource.username=root
  設定連線密碼:
  spring.datasource.password=springboot

三.使用NamedParameterJdbcTemplate
上述設定都完成後，啟動Spring boot時，由Spring jdbc自動創建一個NamedParameterJdbcTemplate的Bean放在Spring容器
1.sql語法分兩大類
  update():INSERT UPDATE DELETE
  query()+queryForObject():SELECT

UPDATE:
1.sql語法中加上「:」，就代表這個值是動態變數
2.透過@RequestBody的註解，取得Request Body的參數，再放在Map給SQL參數使用
@RestController
public class StudentController {

    @Autowired
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @PostMapping("/students")
    public String insert(@RequestBody Student student){

        String sql = "insert into student(id,name) value (:studentId,:studentName)";

        Map<String, Object> map = new HashMap<>();
        map.put("studentId",student.getId());
        map.put("studentName",student.getName());

        namedParameterJdbcTemplate.update(sql,map);

        return "執行 INSERT SQL";
    }
}

DELETE:
1.透過@PathVariable取的URL中的值，再放在Map給SQL參數使用
@RestController
public class StudentController {

    @Autowired
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @PostMapping("/students/{studentId}")
    public String delete(@PathVariable Integer studentId){

        String sql = "delete from student where id = :studentId";

        Map<String, Object> map = new HashMap<>();
        map.put("studentId",studentId);

        namedParameterJdbcTemplate.update(sql,map);

        return "執行 DELETE SQL";
    }
}







