有空時花大概1小時左右學習微服務相關技術直到懶惰或學不動為止
2024/07/o1 Day9
Spring Boot篇

一.query和queryForObject的差別
query()方法:
※返回值是一個List，裡面可能會有0個、1個或是N個以上的數據
※適合用在所有使用SELECT sql查詢的情境
List<Student> list = namedParameterJdbcTemplate.query(sql,map,new StudentRowMapping());
list.get(0)

queryForObject()方法:
※返回值是一個java object
※僅適合用在SELECT count(*)
    @GetMapping("/students/{studentId}")
    public Student select(@PathVariable Integer studentId){
        String countSql = "select count(*) from student";
        Map<String, Object> countMap = new HashMap<>();
        Integer count = namedParameterJdbcTemplate.queryForObject(countSql, countMap, Integer.class);
        System.out.println("Student table中的總數是"+count);

二.MVC的架構:Model、View、Controller
View:使用Html模板呈現數據
Controller:控制器，負責轉發Http request
Model:負責業務邏輯、數據處裡
MVC主要是概念

Spring:Controller-Service-Dao三層式架構
※Class的命名需要以Controller、Service、Dao來做結尾，用來表示這個class是哪一層的
  例如:StudentController、StudentService、StudentDao
※將Controller、Service、Dao這些class變成Bean，並使用@Autowired注入
※Controller的Class要用@RestController，其餘用@Component即可
※Dao只能執行SQL不能處理業務邏輯

1.Controller:負責接收前端傳來的Http request，並且驗證請求參數
@RestController
public class StudentController {

    @Autowired
    private StudentService studentService;

    @PostMapping("/students")
    public String insert(@RequestBody Student student){
        studentService.insert(student);
        return "執行 INSERT SQL";
    }

    @GetMapping("/students/{studentId}")
    public Student select(@PathVariable Integer studentId){
        return studentService.getById(studentId);
    }


2.Service:負責業務邏輯
public interface StudentService {

    void insert(Student student);
    Student getById(Integer studentId);
}


@Component
public class StudentServiceImpl implements StudentService{

    @Autowired
    private StudentDao studentDao;

    @Override
    public void insert(Student student) {
        studentDao.insert(student);
    }
    @Override
    public Student getById(Integer studentId) {
        return studentDao.getById(studentId);
    }
}

3.Dao:負責和資料庫溝通
public interface StudentDao {

    void insert(Student student);
    Student getById(Integer studentId);
}


@Component
public class StudentDaoImpl implements StudentDao{

    @Autowired
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @Override
    public void insert(@RequestBody Student student){
        String sql = "insert into student(name) value (:studentName)";

        Map<String, Object> map = new HashMap<>();
        map.put("studentName",student.getName());

        KeyHolder keyHolder = new GeneratedKeyHolder();

        namedParameterJdbcTemplate.update(sql,new MapSqlParameterSource(map),keyHolder);
        int id = keyHolder.getKey().intValue();
        System.out.println("mysql 自動生成的 id 為: "+id);
    }

    @Override
    public Student getById(Integer studentId) {
        String countSql = "select count(*) from student";
        Map<String, Object> countMap = new HashMap<>();
        Integer count = namedParameterJdbcTemplate.queryForObject(countSql, countMap, Integer.class);
        System.out.println("Student table中的總數是"+count);

        String sql = "select id, name from student where id = :studentId";
        Map<String, Object> map = new HashMap<>();
        map.put("studentId",studentId);

        List<Student> list = namedParameterJdbcTemplate.query(sql,map,new StudentRowMapping());

        if(list.size() > 0){
            return list.get(0);
        }else {
            return null;
        }
    }
}

4.Model:跟資料庫對應的class放在這
public class Student {
    Integer id;
    String name;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

5.RowMapper:放RowMapper相關
public class StudentRowMapper implements RowMapper<Student> {
    @Override
    public Student mapRow(ResultSet rs, int rowNum) throws SQLException {

//        //從資料庫中取得的數據
//        Integer id = rs.getInt("id");
//        String name = rs.getString("name");
//
//        //將數據轉為Java Object
//        Student student = new Student();
//        student.setId(id);
//        student.setName(name);

        Student student = new Student();
        student.setId(rs.getInt("id"));
        student.setName(rs.getString("name"));

        return student;
    }
}



