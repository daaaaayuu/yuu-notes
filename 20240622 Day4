有空時花大概1小時左右學習微服務相關技術直到懶惰或學不動為止
2024/06/22 Day4
Spring Boot篇


一.Controller層統一的Exception處理
@ControllerAdvice+@ExceptionHandler:自訂義每個Exception所返回的http response
1.@ControllerAdvice
用法:只能加在class上
用途:將這class變成一個bean，並且可以在內部使用@ExceptionHandler

2.@ExceptionHandler
用法:只能加在方法上
用途:去catch方法所噴出的Exception

Controller:
@RestController
public class MyController {

    @RequestMapping("/test1")
    public String test1(){
        throw new RuntimeException("test1 error");
    }

    @RequestMapping("/test2")
    public String test2(){
        throw new IllegalArgumentException("test2 error");
    }
}

處理Exception:
@ControllerAdvice
public class MyExceptionHandler {

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<String> handler(RuntimeException exception){
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                .body("RuntimeException :"+exception.getMessage());
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public  ResponseEntity<String> handler(IllegalArgumentException exception){
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body("IllegalArgumentException :"+exception.getMessage());
    }

}

※會看執行的Exception是哪個再去找對應的@ExceptionHandler
※如果每個Exception都要處裡的話，那會寫不完，所以Spring Boot就有提供方法，再找ExceptionHandler時，會去看繼承關係
  (Throwable <- Exception <- RuntimeException <- IllegalArgumentException)
  例如:發生IllegalArgumentException時，會先去找有無@ExceptionHandler在處理，沒有的話就會再找RuntimeException，在沒有會找到Exception，都沒有就會找到Throwable為止
※一般來說寫到Exception即可，就有涵蓋到所有程式相關的錯誤，最高寫到Exception層級而已，因為Throwable無法處理Error那裡的問題
※使用@ControllerAdvice的好處:統一管理Exception，就不用在Controller裡寫try catch，也程式也變得容易閱讀，@ControllerAdvice底層實現的邏輯就是由Spring AOP所實作的
※只要使用@RestController、@Controller等Controller時，@ControllerAdvice就會感應到，要執行@ExceptionHandler

使用@ControllerAdvice的Controller的寫法:
    @RequestMapping("/test2")
    public String test2(){
        throw new IllegalArgumentException("test2 error");
    }

未使用@ControllerAdvice的Controller的寫法:
    @RequestMapping("/test2")
    public String test2(){
    try {
        throw new IllegalArgumentException("test2 error");
    }catch (IllegalArgumentException exception){
        return exception.getMessage();
    }      
    }

二.攔截器Interceptor

Controller:

    @RequestMapping("/test1")
    public String test1(){
        System.out.println("執行 test1 方法");
        return "Hello test1";
    }

設定檔:
    @Configuration
    public class MyConfig implements WebMvcConfigurer {

    @Autowired
    private MyInterceptor myInterceptor;
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(myInterceptor).addPathPatterns("/**");
    }
}

攔截器:
@Component
public class MyInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        System.out.println("執行 MyInterceptor 的 preHandle 方法");
        response.setStatus(401);
        return false;
    }
}

三.Sprng MVC總結
1.Http協議
2.URL路徑的對應
  URL格式
  @RequestMappping
3.結構化的呈現返回數據
  Json格式
  @RestController、@Controller+ResponseBody
4.Http method
  GET、POST
5.取得請求參數的方法
  @RequestBody、@RequestParam、@RequestHeader、@PathVariable
6.設計RESTful API
  GetMapping、PostMapping
7.驗證請求參數
  @NotNul、@NotBlank、@NotEmpty...等等
8.Http Status
  101
  201...等等
9.Controller層統一的Exception處裡
  @ControllerAdvice+@ExceptionHandler
  底層使用Spring AOP機制
10.攔截器Interceptor
   preHandle方法的返回值:true=通過;false=拒絕
